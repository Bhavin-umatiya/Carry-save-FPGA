module csa (
 input [4:0] A, B, C,
output [5:0] Final_Sum // 6-bit final sum to accommodate carry
);
 wire [4:0] S; // Sum from first stage
 wire [4:0] C_out; // Carry outputs from first stage
 // First stage: Carry Save Adders (Full Adders)
 Full_Adder FA0 (A[0], B[0], C[0], S[0], C_out[0]);
 Full_Adder FA1 (A[1], B[1], C[1], S[1], C_out[1]);
 Full_Adder FA2 (A[2], B[2], C[2], S[2], C_out[2]);
 Full_Adder FA3 (A[3], B[3], C[3], S[3], C_out[3]);
Full_Adder FA4 (A[4], B[4], C[4], S[4], C_out[4]);
 // Second stage: Use a Ripple Carry Adder to add S and Carry
 wire [5:0] C_shifted;
 assign C_shifted = {C_out, 1'b0}; // Shift carry left
 // Final stage: Ripple Carry Adder to final sum
 Ripple_Carry_Adder RCA (.X({1'b0, S}), .Y(C_shifted), .Sum(Final_Sum));
endmodule
// Full Adder Module (Used in Carry Save Adder)
module Full_Adder (
 input A, B, Cin,
 output Sum, Carry
);
 assign Sum = A ^ B ^ Cin;
 assign Carry = (A & B) | (B & Cin) | (Cin & A);
endmodule
// Ripple Carry Adder for final stage
module Ripple_Carry_Adder (
 input [5:0] X, Y,
 output [5:0] Sum
);
 assign Sum = X + Y; // Simple addition
endmodule
